apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "fence-agents-remediation.medik8s.io/v1alpha1",
          "kind": "FenceAgentsRemediation",
          "metadata": {
            "name": "worker-1"
          },
          "spec": {
            "agent": "fence_ipmilan",
            "nodeparameters": {
              "--ipport": {
                "master-0": "6230",
                "master-1": "6231",
                "master-2": "6232",
                "worker-0": "6233",
                "worker-1": "6234",
                "worker-2": "6235"
              }
            },
            "remediationStrategy": "ResourceDeletion",
            "retrycount": 5,
            "retryinterval": "5s",
            "sharedparameters": {
              "--action": "reboot",
              "--ip": "192.168.111.1",
              "--lanplus": "",
              "--password": "password",
              "--username": "admin"
            },
            "timeout": "60s"
          }
        },
        {
          "apiVersion": "fence-agents-remediation.medik8s.io/v1alpha1",
          "kind": "FenceAgentsRemediationTemplate",
          "metadata": {
            "name": "fenceagentsremediationtemplate-default"
          },
          "spec": {
            "template": {}
          }
        }
      ]
    capabilities: Basic Install
    categories: OpenShift Optional
    containerImage: ""
    createdAt: ""
    description: Fence Agents Remediation Operator uses well-known agents to fence
      and remediate unhealthy nodes. The remediation includes rebooting the unhealthy
      node using a fence agent, and then evicting workloads from the unhealthy node.
    olm.skipRange: '>=0.0.1'
    operatorframework.io/suggested-namespace: openshift-workload-availability
    operatorframework.io/suggested-namespace-template: '{"kind":"Namespace","apiVersion":"v1","metadata":{"name":"openshift-workload-availability","annotations":{"openshift.io/node-selector":""}}}'
    operators.operatorframework.io/builder: operator-sdk-v1.32.0
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    repository: https://github.com/medik8s/fence-agents-remediation
    support: Medik8s
  name: fence-agents-remediation.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: FenceAgentsRemediation is the Schema for the fenceagentsremediations
        API
      displayName: Fence Agents Remediation
      kind: FenceAgentsRemediation
      name: fenceagentsremediations.fence-agents-remediation.medik8s.io
      resources:
      - kind: FenceAgentsRemediation
        name: fenceagentsremediations
        version: v1alpha1
      specDescriptors:
      - description: Agent is the name of fence agent that will be used. It should
          have a fence_ prefix.
        displayName: Agent
        path: agent
      - description: CredentialParameters are passed to the fencing agent according
          to the node that is fenced, and the parameters values are fetched from a
          known secret
        displayName: Credential Parameters
        path: credentialparameters
      - description: NodeParameters are passed to the fencing agent according to the
          node that is fenced, since they are node specific
        displayName: Node Parameters
        path: nodeparameters
      - description: RemediationStrategy is the remediation method for unhealthy nodes.
          Currently, it could be either "OutOfServiceTaint" or "ResourceDeletion".
          ResourceDeletion will iterate over all pods related to the unhealthy node
          and delete them. OutOfServiceTaint will add the out-of-service taint which
          is a new well-known taint "node.kubernetes.io/out-of-service" that enables
          automatic deletion of pv-attached pods on failed nodes, "out-of-service"
          taint is only supported on clusters with k8s version 1.26+ or OCP/OKD version
          4.13+.
        displayName: Remediation Strategy
        path: remediationStrategy
      - description: RetryCount is the number of times the fencing agent will be executed
        displayName: Retry Count
        path: retrycount
      - description: RetryInterval is the interval between each fencing agent execution
        displayName: Retry Interval
        path: retryinterval
      - description: SharedParameters are passed to the fencing agent regardless of
          which node is about to be fenced (i.e., they are common for all the nodes)
        displayName: Shared Parameters
        path: sharedparameters
      - description: Timeout is the timeout for each fencing agent execution
        displayName: Timeout
        path: timeout
      statusDescriptors:
      - description: 'Represents the observations of a FenceAgentsRemediation''s current
          state. Known .status.conditions.type are: "Processing", "FenceAgentActionSucceeded",
          and "Succeeded".'
        displayName: conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      - description: LastUpdateTime is the last time the status was updated.
        displayName: Last Update Time
        path: lastUpdateTime
      version: v1alpha1
    - description: FenceAgentsRemediationTemplate is the Schema for the fenceagentsremediationtemplates
        API
      displayName: Fence Agents Remediation Template
      kind: FenceAgentsRemediationTemplate
      name: fenceagentsremediationtemplates.fence-agents-remediation.medik8s.io
      resources:
      - kind: FenceAgentsRemediationTemplate
        name: fenceagentsremediationtemplates
        version: v1alpha1
      specDescriptors:
      - description: Template defines the desired state of FenceAgentsRemediationTemplate
        displayName: Template
        path: template
      - description: Agent is the name of fence agent that will be used. It should
          have a fence_ prefix.
        displayName: Agent
        path: template.spec.agent
      - description: CredentialParameters are passed to the fencing agent according
          to the node that is fenced, and the parameters values are fetched from a
          known secret
        displayName: Credential Parameters
        path: template.spec.credentialparameters
      - description: NodeParameters are passed to the fencing agent according to the
          node that is fenced, since they are node specific
        displayName: Node Parameters
        path: template.spec.nodeparameters
      - description: RemediationStrategy is the remediation method for unhealthy nodes.
          Currently, it could be either "OutOfServiceTaint" or "ResourceDeletion".
          ResourceDeletion will iterate over all pods related to the unhealthy node
          and delete them. OutOfServiceTaint will add the out-of-service taint which
          is a new well-known taint "node.kubernetes.io/out-of-service" that enables
          automatic deletion of pv-attached pods on failed nodes, "out-of-service"
          taint is only supported on clusters with k8s version 1.26+ or OCP/OKD version
          4.13+.
        displayName: Remediation Strategy
        path: template.spec.remediationStrategy
      - description: RetryCount is the number of times the fencing agent will be executed
        displayName: Retry Count
        path: template.spec.retrycount
      - description: RetryInterval is the interval between each fencing agent execution
        displayName: Retry Interval
        path: template.spec.retryinterval
      - description: SharedParameters are passed to the fencing agent regardless of
          which node is about to be fenced (i.e., they are common for all the nodes)
        displayName: Shared Parameters
        path: template.spec.sharedparameters
      - description: Timeout is the timeout for each fencing agent execution
        displayName: Timeout
        path: template.spec.timeout
      version: v1alpha1
  description: |
    ### Introduction
    Fence Agents Remediation (FAR) is a Kubernetes operator that uses well-known agents to fence and remediate unhealthy nodes.
    The remediation includes rebooting the unhealthy node using a fence agent and then evicting workloads from the unhealthy node.

    ### Compatibility
    FAR is one of the remediator operators by [Medik8s](https://www.medik8s.io/remediation/remediation/),
    such as [Self Node Remediation](https://github.com/medik8s/self-node-remediation) and [Machine Deletion Remediation](https://github.com/medik8s/machine-deletion-remediation),
    that were designed to run with the Node HealthCheck Operator [(NHC)](https://github.com/medik8s/node-healthcheck-operator) which detects an unhealthy node and creates remediation CR.
    It is recommended to use FAR with NHC for an easier and smoother experience by fully automating the remediation process, but it can be used as a standalone remediator for the more experienced user.

    ### Advantages
    - Robustness - FAR has direct feedback from the traditional Application Programming Interface (API) call (e.g., IPMI) about the result of the fence action without using the Kubernetes API.
    - Speed - FAR is rapid since it can reboot a node and receive an acknowledgment from the API call while other remediators might need to wait a safe time till they can expect the node to be rebooted.
    - Diversity - FAR includes several fence agents from a large known set of upstream fencing agents for bare metal servers, virtual machines, cloud platforms, etc.
    - Adjustability - FAR allows to set up different parameters for running the API call that remediates the node.
  displayName: Fence Agents Remediation Operator
  icon:
  - base64data: base64EncodedIcon
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - nodes
          verbs:
          - delete
          - get
          - list
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          verbs:
          - delete
          - deletecollection
          - get
          - list
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - pods/exec
          verbs:
          - create
        - apiGroups:
          - fence-agents-remediation.medik8s.io
          resources:
          - fenceagentsremediations
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - fence-agents-remediation.medik8s.io
          resources:
          - fenceagentsremediations/finalizers
          verbs:
          - update
        - apiGroups:
          - fence-agents-remediation.medik8s.io
          resources:
          - fenceagentsremediations/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - storage.k8s.io
          resources:
          - volumeattachments
          verbs:
          - delete
          - get
          - list
          - watch
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: fence-agents-remediation-controller-manager
      deployments:
      - label:
          app.kubernetes.io/name: fence-agents-remediation-operator
          control-plane: controller-manager
        name: fence-agents-remediation-controller-manager
        spec:
          replicas: 2
          selector:
            matchLabels:
              app.kubernetes.io/name: fence-agents-remediation-operator
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                app.kubernetes.io/name: fence-agents-remediation-operator
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --http2-disable
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: quay.io/brancz/kube-rbac-proxy:v0.15.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                command:
                - /manager
                env:
                - name: DEPLOYMENT_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                image: quay.io/medik8s/fence-agents-remediation-operator:latest
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              priorityClassName: system-cluster-critical
              securityContext:
                runAsNonRoot: true
                seccompProfile:
                  type: RuntimeDefault
              serviceAccountName: fence-agents-remediation-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: fence-agents-remediation-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - medik8s
  - fencing
  - auto-healing
  - recovery
  - high-availability
  - fence-agents
  - fence-agents-remediation
  - remediation
  - far
  - baremetal
  links:
  - name: Fence Agents Remediation
    url: https://www.medik8s.io/remediation/fence-agents-remediation/fence-agents-remediation/
  - name: Source Code
    url: https://www.github.com/medik8s/fence-agents-remediation
  maintainers:
  - email: medik8s@googlegroups.com
    name: Medik8s Team
  maturity: alpha
  minKubeVersion: 1.24.0
  provider:
    name: Medik8s
    url: https://github.com/medik8s
  version: 0.0.1
  webhookdefinitions:
  - admissionReviewVersions:
    - v1
    containerPort: 443
    deploymentName: fence-agents-remediation-controller-manager
    failurePolicy: Fail
    generateName: mfenceagentsremediationtemplate.kb.io
    rules:
    - apiGroups:
      - fence-agents-remediation.medik8s.io
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - fenceagentsremediationtemplates
    sideEffects: None
    targetPort: 9443
    type: MutatingAdmissionWebhook
    webhookPath: /mutate-fence-agents-remediation-medik8s-io-v1alpha1-fenceagentsremediationtemplate
  - admissionReviewVersions:
    - v1
    containerPort: 443
    deploymentName: fence-agents-remediation-controller-manager
    failurePolicy: Fail
    generateName: vfenceagentsremediation.kb.io
    rules:
    - apiGroups:
      - fence-agents-remediation.medik8s.io
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - fenceagentsremediations
    sideEffects: None
    targetPort: 9443
    type: ValidatingAdmissionWebhook
    webhookPath: /validate-fence-agents-remediation-medik8s-io-v1alpha1-fenceagentsremediation
  - admissionReviewVersions:
    - v1
    containerPort: 443
    deploymentName: fence-agents-remediation-controller-manager
    failurePolicy: Fail
    generateName: vfenceagentsremediationtemplate.kb.io
    rules:
    - apiGroups:
      - fence-agents-remediation.medik8s.io
      apiVersions:
      - v1alpha1
      operations:
      - CREATE
      - UPDATE
      resources:
      - fenceagentsremediationtemplates
    sideEffects: None
    targetPort: 9443
    type: ValidatingAdmissionWebhook
    webhookPath: /validate-fence-agents-remediation-medik8s-io-v1alpha1-fenceagentsremediationtemplate
